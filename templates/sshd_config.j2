{%- import '_macros.j2' as macros with context -%}
#
# {{ ansible_managed }}
#

###############################################################################
# SSH Daemon configuration file
###############################################################################

### GENERAL SECTION
{% if ssh_server__pidfile is defined %}
PidFile "{{ ssh_server__pidfile }}"
{% endif %}
Protocol {{ ssh_server__protocol }}
UsePrivilegeSeparation {{ macros.stringOrBool(ssh_server__privilege_separation) }}



### NETWORK SECTION
{% for port in ssh_server__ports %}
Port {{ port }}
{% endfor %}
AddressFamily "{{ ssh_server__address_family }}"
{% for address in ssh_server__listen %}
ListenAddress {{ address }}
{% endfor %}

UseDNS {{ macros.bool(ssh_server__use_dns, True) }}

AllowAgentForwarding {{ macros.stringOrBool(ssh_server__allow_agent_forwarding) }}

AllowTcpForwarding {{ macros.stringOrBool(ssh_server__allow_tcp_forwarding) }}
PermitOpen "{{ ssh_server__permit_open if ssh_server__permit_open is string else ssh_server__permit_open|join(' ') }}"
GatewayPorts {{ macros.stringOrBool(ssh_server__gateway_ports) }}

{% if _ssh_server__version|version_compare(6.7, '>=') %}
AllowStreamLocalForwarding {{ macros.stringOrBool(ssh_server__allow_stream_local_forwarding) }}
{% endif %}

PermitTunnel {{ macros.stringOrBool(ssh_server__permit_tunnel) }}
Compression	{{ macros.stringOrBool(ssh_server__compression) }}
{% if ssh_server__ip_qos is string %}
IPQoS {{ ssh_server__ip_qos }}
{% else %}
IPQoS {{ ssh_server__ip_qos[0] }} {{ ssh_server__ip_qos[1] }}
{% endif %}



### Encryption parameters
{% set _ssh_server__tpl_kex_algorithms = [] %}
{% for key, value in ssh_server__kex_algorithms_map.iteritems() %}
{%   if _ssh_server__tpl_kex_algorithms|length == 0 and _ssh_server__version|version_compare(key, '>=') %}
{%     for element in value %}
{%       set _ = _ssh_server__tpl_kex_algorithms.append(element) %}
{%     endfor %}
{%   endif %}
{% endfor %}
{% set _ssh_server__tpl_kex_algorithms = (_ssh_server__tpl_kex_algorithms|union(ssh_server__kex_algorithms_additional)|unique) %}
{% if _ssh_server__tpl_kex_algorithms %}
KexAlgorithms {{ _ssh_server__tpl_kex_algorithms|join(",") }}
{% endif %}

{% set _ssh_server__tpl_ciphers = [] %}
{% for key, value in ssh_server__ciphers_map.iteritems() %}
{%   if _ssh_server__tpl_ciphers|length == 0 and _ssh_server__version|version_compare(key, '>=') %}
{%     for element in value %}
{%       set _ = _ssh_server__tpl_ciphers.append(element) %}
{%     endfor %}
{%   endif %}
{% endfor %}
{% set _ssh_server__tpl_ciphers = (_ssh_server__tpl_ciphers|union(ssh_server__ciphers_additional)|unique) %}
{% if _ssh_server__tpl_ciphers %}
Ciphers {{ _ssh_server__tpl_ciphers|join(",") }}
{% endif %}

{% set _ssh_server__tpl_macs = [] %}
{% for key, value in ssh_server__macs_map.iteritems() %}
{%   if _ssh_server__tpl_macs|length == 0 and _ssh_server__version|version_compare(key, '>=') %}
{%     for element in value %}
{%       set _ = _ssh_server__tpl_macs.append(element) %}
{%     endfor %}
{%   endif %}
{% endfor %}
{% set _ssh_server__tpl_macs = (_ssh_server__tpl_macs|union(ssh_server__macs_additional)|unique) %}
{% if _ssh_server__tpl_macs %}
MACs {{ _ssh_server__tpl_macs|join(",") }}
{% endif %}

{% if _ssh_server__version|version_compare(7.4, '<') %}
## Protocol 1
ServerKeyBits {{ ssh_server__server_key_bits|int }}
KeyRegenerationInterval {{ ssh_server__key_regeneration_interval|int }}
{% endif %}

{% if ssh_server__host_certificate is defined %}
HostCertificate {{ ssh_server__host_certificate }}
{% endif %}
{% for hostkey in ssh_server__host_keys|d([]) %}
HostKey {{ hostkey }}
{% endfor %}



### AUTHENTIFICATION MODE
{% if ssh_server__authentication_methods is defined %}
AuthenticationMethods {{ ssh_server__authentication_methods }}
{% endif %}

UsePAM {{ macros.bool(ssh_server__use_pam) }}
{% if _ssh_server__version|version_compare(7.4, '<') %}
UseLogin {{ macros.bool(ssh_server__use_login) }}
{% endif %}

## Password authentication
PasswordAuthentication {{ macros.bool(ssh_server__password_authentication) }}
PermitEmptyPasswords {{ macros.bool(ssh_server__permit_empty_passwords) }}

## ChallengeResponse Authentication
ChallengeResponseAuthentication {{ macros.bool(ssh_server__challenge_response_authentication) }}

## Keyboard Interactive authentification
KbdInteractiveAuthentication {{ macros.bool(ssh_server__keyboard_interactive_authentication) }}

## PubKey authentication
PubkeyAuthentication {{ macros.bool(ssh_server__pubkey_authentication) }}
AuthorizedKeysFile {{ ssh_server__authorized_keys if ssh_server__authorized_keys is string else ssh_server__authorized_keys|join(' ') }}
{% if ssh_server__authorized_keys_command is defined and _ssh_server__version|version_compare(6.2, '>=') %}
AuthorizedKeysCommand {{ ssh_server__authorized_keys_command }}
AuthorizedKeysCommandUser {{ ssh_server__authorized_keys_command_user }}
{%   if ssh_server__authorized_principals_file is defined %}
AuthorizedPrincipalsFile "{{ ssh_server__authorized_principals_file }}"
{%   endif %}
{%   if ssh_server__trusted_user_ca_keys is defined %}
TrustedUserCAKeys "{{ ssh_server__trusted_user_ca_keys }}"
{%   endif %}
{%   if ssh_server__revoked_keys is defined %}
RevokedKeys "{{ ssh_server__revoked_keys }}"
{%   endif %}
{%   if ansible_os_family not in ['RedHat'] and _ssh_server__version|version_compare(6.7, '<') %}
PermitBlacklistedKeys {{ macros.bool(ssh_server__permit_blacklisted_keys) }}
{%   endif %}
{% endif %}

{% if _ssh_server__version|version_compare(7.4, '<') %}
## RSAAuthentication
# Protocol 1
RSAAuthentication {{ macros.bool(ssh_server__rsa_authentication) }}
RhostsRSAAuthentication {{ macros.bool(ssh_server__rhosts_rsa_authentication) }}
{% endif %}

## HostbasedAuthentication
# Protocol 2
HostbasedAuthentication {{ macros.bool(ssh_server__host_based_authentication) }}
{% if ssh_server__host_based_authentication|bool %}
HostbasedUsesNameFromPacketOnly {{ macros.bool(ssh_server__host_based_uses_name_from_packet_only) }}
IgnoreUserKnownHosts {{ macros.bool(ssh_server__ignore_user_known_hosts) }}
{% endif %}

IgnoreRhosts {{ macros.bool(ssh_server__ignore_rhosts) }}

## Kerberos authentication
KerberosAuthentication {{ macros.bool(ssh_server__kerberos_authentication) }}
{% if ssh_server__kerberos_authentication|bool %}
KerberosGetAFSToken {{ macros.bool(ssh_server__kerberos_get_afs_token) }}
KerberosOrLocalPasswd {{ macros.bool(ssh_server__kerberos_or_local_passwd) }}
KerberosTicketCleanup {{ macros.bool(ssh_server__kerberos_ticket_cleanup) }}
KerberosUseKuserok {{ macros.bool(ssh_server__kerberos_use_kuserok) }}
{% endif %}

## GSSAPI authentication
GSSAPIAuthentication {{ macros.bool(ssh_server__gssapi_authentication) }}
{% if ssh_server__gssapi_authentication|bool %}
GSSAPIKeyExchange {{ macros.bool(ssh_server__gssapi_key_exchange) }}
GSSAPICleanupCredentials {{ macros.bool(ssh_server__gssapi_cleanup_credentials) }}
GSSAPIStrictAcceptorCheck {{ macros.bool(ssh_server__gssapi_strict_acceptor_check) }}
GSSAPIStoreCredentialsOnRekey {{ macros.bool(ssh_server__gssapi_store_credentials_on_rekey) }}
{%   if _ssh_server__version|version_compare(6.6, '>=') and ansible_distribution not in ['Debian'] %}
GSSAPIEnablek5users {{ macros.bool(ssh_server__gssapi_enable_k5_users) }}
{%   endif %}
{% endif %}



### AUTHORIZATION
## User-based access control
{% if ssh_server__deny_users|d([])|length > 0 %}
DenyUsers {{ ssh_server__deny_users|unique|join(' ') }}
{% endif %}
{% if ssh_server__allow_users|d([])|length > 0 %}
AllowUsers {{ ssh_server__allow_users|unique|join(' ') }}
{% endif %}

## Group-based access control
{% if ssh_server__deny_groups|d([])|length > 0 %}
DenyGroups {{ ssh_server__deny_groups|unique|join(' ') }}
{% endif %}
{% if ssh_server__allow_groups|d([])|length > 0 %}
AllowGroups {{ ssh_server__allow_groups|unique|join(' ') }}
{% endif %}

PermitRootLogin {{ macros.stringOrBool(ssh_server__permit_root_login) }}



### LOGIN
LoginGraceTime {{ ssh_server__login_grace_time }}
MaxAuthTries {{ ssh_server__max_auth_tries|int }}
MaxSessions {{ ssh_server__max_sessions|int }}
MaxStartups {{ ssh_server__max_startups.start~':'~ssh_server__max_startups.rate~':'~ssh_server__max_startups.full if ssh_server__max_startups is mapping else ssh_server__max_startups }}

## User session
AcceptEnv {{ ssh_server__accept_env|unique|join(' ') }}
PermitUserEnvironment {{ macros.bool(ssh_server__permit_user_environment) }}
{% if _ssh_server__version|version_compare(6.7, '>=') %}
PermitUserRC {{ macros.bool(ssh_server__permit_user_rc) }}
{% endif %}
PermitTTY {{ macros.bool(ssh_server__permit_tty) }}
StrictModes {{ macros.bool(ssh_server__strict_modes) }}

## Greeting options
Banner {{ ssh_server__banner }}
{% if ansible_os_family == 'Debian' %}
DebianBanner {{ macros.bool(ssh_server__debian_banner) }}
{% endif %}
PrintMotd {{ macros.bool(ssh_server__print_motd) }}
PrintLastLog {{ macros.bool(ssh_server__print_last_log) }}

# Additional text to append to the SSH protocol banner sent by the server upon connection.
VersionAddendum {{ ansible_hostname }}


### SESSION PARAMETERS
# The pathname of a directory to chroot to after authentication.
# All components of the pathname must be root-owned directories that are not writable by any other user or group.
# After the chroot, sshd changes the working directory to the user's home directory.
# Available tokens :
#   - %% is replaced by a literal '%'
#   - %h is replaced by the home directory of the user being authenticated
#   - %u is replaced by the username of that user.
# The ChrootDirectory must contain the necessary files and directories to support the user's session.
# (Default: (str) ""
#ChrootDirectory "/home/%u"

# Number of seconds after which if no data has been received from the client, sshd(8) will send a message to request a response from the client.
# (Default: (int) 0)
ClientAliveInterval 10

# The number of client alive messages which may be sent without sshd(8) receiving any messages back from the client.
# If it is reached sshd will disconnect the client, terminating the session.
# (Default: (int) 3)
ClientAliveCountMax 3

# If the system should send TCP keepalive messages to the other side.
# If they are sent, death of the connection or crash of one of the machines will be properly noticed.
# If they are not, sessions may hang indefinitely on the server, leaving “ghost” users and consuming server resources.
# (Default: (bool) yes
TCPKeepAlive no

# Specifies the maximum amount of data that may be transmitted before the session key is renegotiated
# optionally followed a maximum amount of time that may pass before the session key is renegotiated
# The first argument is specified in bytes and may have a suffix of ‘K’, ‘M’, or ‘G’.
#RekeyLimit default none


### X11 FORWARDING
# If X11 forwarding is permitted.
# (Default: (bool) no)
X11Forwarding {{ ssh_server__x11_forwarding }}

# The first display number available for X11 forwarding.
# (Default: (int) 10)
X11DisplayOffset 10

# If sshd should bind the X11 forwarding server to the loopback address or to the wildcard address.
# By default, sshd binds the forwarding server to the loopback address and sets the hostname part of the DISPLAY environment variable to “localhost”.
# This prevents remote hosts from connecting to the proxy display. However, some older X11 clients may not function with this configuration.
# X11UseLocalhost may be set to “no” to specify that the forwarding server should be bound to the wildcard address.
# (Default: (bool) yes)
X11UseLocalhost yes

# Specifies the full pathname of the xauth(1) program.
# (Default: (str) "/usr/bin/xauth")
#XAuthLocation ""



### LOGGING
# The facility code that is used when logging messages from sshd.
# Values: "DAEMON", "USER", "AUTH", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7".
SyslogFacility {{ ssh_server__log_facility }}

# The verbosity level that is used when logging messages.
# Values: "QUIET", "FATAL", "ERROR", "INFO", "VERBOSE", "DEBUG", "DEBUG1", "DEBUG2", and "DEBUG3".
# DEBUG and DEBUG1 are equivalent. DEBUG2 and DEBUG3 each specify higher levels of debugging output.
# Logging with a DEBUG level violates the privacy of users and is not recommended.
LogLevel {{ ssh_server__log_level }}



### SUBSYSTEMS
# Configures an external subsystem (e.g. file transfer daemon).
# Arguments should be a subsystem name and a command (with optional arguments) to execute upon subsystem request.
# The command sftp-server(8) implements the “sftp” file transfer subsystem.
# Alternately the name “internal-sftp” implements an in-process “sftp” server.
# This may simplify configurations using ChrootDirectory to force a different filesystem root on clients.
# (Default: (str) "")
Subsystem sftp internal-sftp



### MATCH SECTION
# Introduces a conditional block.
# If all of the criteria on the Match line are satisfied, the keywords on the following lines override those set in the global section of the
# config file, until either another Match line or the end of the file.
# If a keyword appears in multiple Match blocks that are satisified, only the first instance of the keyword is applied.
#
# The arguments to Match are one or more criteria-pattern pairs or the single token All which matches all criteria.
# The available criteria are :
#   - User
#   - Group
#   - Host
#   - LocalAddress
#   - LocalPort
#   - Address
# The match patterns may consist of single entries or comma-separated lists and may use the wildcard and negation operators described in the PATTERNS section.
# The patterns in an Address criteria may additionally contain addresses to match in CIDR address/masklen format, e.g. “192.0.2.0/24” or “3ffe:ffff::/32”.
# Note that the mask length provided must be consistent with the address -
#    it is an error to specify a mask length that is too long for the address or one with bits set in this host portion of the address.
# For example, “192.0.2.0/33” and “192.0.2.0/8” respectively.
# Only a subset of keywords may be used on the lines following a Match keyword.
# Available keywords are AcceptEnv, AllowAgentForwarding, AllowGroups, AllowTcpForwarding, AllowUsers,
#   AuthenticationMethods, AuthorizedKeysCommand, AuthorizedKeysCommandUser, AuthorizedKeysFile, AuthorizedPrincipalsFile,
#   Banner, ChrootDirectory, DenyGroups, DenyUsers, ForceCommand, GatewayPorts, GSSAPIAuthentication, HostbasedAuthentication,
#   HostbasedUsesNameFromPacketOnly, KbdInteractiveAuthentication, KerberosAuthentication, MaxAuthTries, MaxSessions,
#   PasswordAuthentication, PermitEmptyPasswords, PermitOpen, PermitRootLogin, PermitTTY, PermitTunnel, PermitUserRC,
#   PubkeyAuthentication, RekeyLimit, RhostsRSAAuthentication, RSAAuthentication, X11DisplayOffset, X11Forwarding and X11UseLocalHost.
{% for entry in ssh_server__match_list|d([]) %}
{%   if entry.match is defined and entry.options is defined %}
Match {{ entry.match }}
{%     if entry.options is string %}
{{ entry.options | indent(2, true) }}
{%     else %}
{%       for opt in entry.options %}
{{ opt | indent(2, true) }}
{%       endfor %}
{%     endif %}
{%   endif %}
{% endfor %}


# Forces the execution of the command specified by ForceCommand, ignoring any command supplied by the client and ~/.ssh/rc if present.
# This applies to shell, command, or subsystem execution.
# Specifying a command of “internal-sftp" will force the use of an in-process sftp server that requires no support files when used with ChrootDirectory.
#ForceCommand
