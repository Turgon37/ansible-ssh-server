---

- name: Find installed host keys
  find:
    paths: '{{ ssh_server__config_dir }}'
    patterns: '{{ ssh_server__host_keys_file_prefix }}.*{{ ssh_server__host_keys_file_suffix }}(.pub)?$'
    file_type: file
    recurse: false
    use_regex: true
  register: _ssh_server__installed_host_keys
  check_mode: false

- name: Select appropriate host key map entry
  set_fact:
    ssh_server__host_keys_types: '{{ item.value }}'
  with_dict: '{{ ssh_server__host_keys_types_map }}'
  when: ssh_server__host_keys_types is not defined
    and _ssh_server__version is version(item.key, '>=')

- name: Remove default host keys
  file:
    path: '{{ ssh_server__config_dir }}/{{ item }}'
    state: absent
  with_items:
    - ssh_host_key
    - ssh_host_key.pub

- name: Remove unwanted host keys
  file:
    path: '{{ item }}'
    state: absent
  with_items: "{{ _ssh_server__installed_host_keys.files|map(attribute='path')|list }}"
  when: item
    |basename
    |regex_replace('^'~ssh_server__host_keys_file_prefix~'(.*)'~ssh_server__host_keys_file_suffix~'(\\.pub)?', '\\1') not in ssh_server__host_keys_types
  notify: ['test-and-restart-sshd']

- name: Ensure wanted host keys are present
  command: >
    ssh-keygen -q {% if item in ssh_server__host_keys_types_bits_map %} -b {{ ssh_server__host_keys_types_bits_map[item] }} {% endif %}
    -t {{ item }}
    -N ""
    -f {{ ssh_server__config_dir }}/{{ ssh_server__host_keys_file_prefix }}{{ item }}{{ ssh_server__host_keys_file_suffix }}
  args:
    creates: '{{ ssh_server__config_dir }}/{{ ssh_server__host_keys_file_prefix }}{{ item }}{{ ssh_server__host_keys_file_suffix }}'
  with_items: '{{ ssh_server__host_keys_types }}'
  register: _ssh_server__created_host_keys
  notify: ['test-and-restart-sshd']

- name: Fill host keys list for sshd
  set_fact:
    ssh_server__host_keys: '{{ ssh_server__host_keys|d([])|union([item.invocation.module_args.creates]) }}'
  with_items: '{{ _ssh_server__created_host_keys.results }}'
  when: item is success
