---
# defaults file for ssh-server

# Enable facts deploiement
ssh_server__facts: true


### INSTALL CONFIGURATION
# ---------------------------------------
ssh_server__packages_names:
  - openssh-server

# Specify minimum size of Diffie-Hellman parameters available to the SSH
# server. Parameters smaller than the given amount will be removed from the
# :file:`/etc/ssh/moduli` file.
ssh_server__moduli_minimum: 4096


### SERVICE CONFIGURATION
# ---------------------------------------

# the name of the ssh service
ssh_server__service_name: sshd

# If true the ssh service will be started and enabled
ssh_server__service_enabled: true

# Path to systemd override directory
ssh_server__systemd_override_options_dir: '/etc/systemd/system/{{ ssh_server__service_name }}.service.d'

# The main configuration directory
ssh_server__config_dir: /etc/ssh

# The main configuration file
ssh_server__config_file: '{{ ssh_server__config_dir }}/sshd_config'

# Optional path to service's environment variables
# ssh_server__service_environment:


### SERVER CONFIGURATION
# ---------------------------------------

### GENERAL SECTION
# ---------------------------------------
# Specifies the protocol versions sshd(8) supports.
ssh_server__protocol: 2

# If sshd(8) separates privileges by creating an unprivileged child process to deal with incoming network traffic.
# After successful authentication, another process will be created that has the privilege of the authenticated user.
# If it is set to "sandbox" then the pre-authentication unprivileged process is subject to additional restrictions.
ssh_server__privilege_separation: true

# Specifies the file that contains the process ID of the SSH daemon.
ssh_server__pidfile: /var/run/sshd.pid

# The facility code that is used when logging messages from sshd.
# Values: "DAEMON", "USER", "AUTH", "LOCAL0", "LOCAL1", "LOCAL2", "LOCAL3", "LOCAL4", "LOCAL5", "LOCAL6", "LOCAL7".
ssh_server__log_facility: AUTH

# The verbosity level that is used when logging messages.
# Values: "QUIET", "FATAL", "ERROR", "INFO", "VERBOSE", "DEBUG", "DEBUG1", "DEBUG2", and "DEBUG3".
# DEBUG and DEBUG1 are equivalent. DEBUG2 and DEBUG3 each specify higher levels of debugging output.
# Logging with a DEBUG level violates the privacy of users and is not recommended.
ssh_server__log_level: INFO


### NETWORK SECTION
# ---------------------------------------
# List of ports which ``sshd`` will listen on.
ssh_server__ports:
  - 22

# List of IP addresses on which ``sshd`` should listen for new connections. If
# it's empty, ``sshd`` listens on all interfaces.
# Specifies the local addresses sshd(8) should listen on.  The following forms may be used:
#   ListenAddress host|IPv4_addr|IPv6_addr
#   ListenAddress host|IPv4_addr:port
#   ListenAddress [host|IPv6_addr]:port
# If port is not specified, sshd will listen on the address and all prior Port options specified.
# The default is to listen on all local addresses. Multiple ListenAddress options are permitted.
ssh_server__listen: ['0.0.0.0']

# Specifies which address family should be used by sshd(8).
# Values: "any", "inet" (use IPv4 only), or "inet6" (use IPv6 only).
ssh_server__address_family: 'any'

# If sshd should look up the remote host name and check that the resolved host name for the remote IP address maps back to the very same IP address.
ssh_server__use_dns: true

# If the system should send TCP keepalive messages to the other side.
# If they are sent, death of the connection or crash of one of the machines will be properly noticed.
# If they are not, sessions may hang indefinitely on the server, leaving “ghost” users and consuming server resources.
ssh_server__tcp_keepalive: true

# Specifies whether ssh-agent forwarding is permitted.
# Values 'yes'/'all' to allow, 'no' to prevent, 'local' to allow only local, 'remote' to allow only remote
ssh_server__allow_agent_forwarding: true

# Specifies whether TCP forwarding is permitted.
# Values 'yes'/'all' to allow, 'no' to prevent, 'local' to allow only local, 'remote' to allow only remote
# (Default: (bool) yes)
ssh_server__allow_tcp_forwarding: true

# Specifies the destinations to which TCP port forwarding is permitted.
# The forwarding specification must be one of the following forms:
#   PermitOpen host:port
#   PermitOpen IPv4_addr:port
#   PermitOpen [IPv6_addr]:port
# Multiple forwards may be specified by separating them with whitespace.
# An argument of “any" can be used to remove all restrictions and permit any forwarding requests.
ssh_server__permit_open: 'any'

# If remote hosts are allowed to connect to ports forwarded for the client.
# By default, sshd(8) binds remote port forwardings to the loopback address.
# This prevents other remote hosts from connecting to forwarded ports.
# GatewayPorts can be used to specify that sshd should allow remote port forwardings to bind to non-loopback addresses, thus allowing other hosts to connect.
#   - "no" to force remote port forwardings to be available to the local host only
#   - "yes" to force remote port forwardings to bind to the wildcard address
#   - "clientspecified" to allow the client to select the address to which the forwarding is bound
ssh_server__gateway_ports: false

# Specifies whether StreamLocal (Unix-domain socket) forwarding is permitted
# Values 'yes'/'all' to allow, 'no' to prevent, 'local' to allow only local, 'remote' to allow only remote
ssh_server__allow_stream_local_forwarding: true

# If tun device forwarding is allowed.
# Values: "yes", "point-to-point" (layer 3), "ethernet" (layer 2), or "no".
# Specifying “yes" permits both "point-to-point" and "ethernet".
ssh_server__permit_tunnel: false

# If compression is allowed, or delayed until the user has authenticated successfully.
# Values: "yes", "delayed", or "no".
ssh_server__compression: delayed

# Specifies the IPv4 type-of-service or DSCP class for the connection.
# This option may take one or two arguments, separated by whitespace.
# If one argument is specified, it is used as the packet class unconditionally.
# If two values are specified, the first is automatically selected for interactive sessions and the second for non-interactive sessions.
# The default is “lowdelay” for interactive sessions and “throughput” for non-interactive sessions.
# Values: "af11", "af12", "af13", "af21", "af22", "af23", "af31", "af32", "af33", "af41", "af42", "af43", "cs0", "cs1",
#  "cs2", "cs3", "cs4", "cs5", "cs6", "cs7", "ef", "lowdelay", "throughput", "reliability", or a numeric value.
ssh_server__ip_qos: ['lowdelay', 'throughput']


### Encryption parameters
# -------------------------

# Build the default list of Kex algorithms
ssh_server__kex_algorithms: "\
  {% set algs = [] -%}
  {% for version, algorithms in ssh_server__kex_algorithms_map|dictsort(reverse=true) -%}
  {%   if not algs and _ssh_server__version is version_compare(version, '>=') -%}
  {%     set _ = algs.extend(algorithms) -%}
  {%   endif -%}
  {% endfor -%}
  {{ algs|union(ssh_server__kex_algorithms_additional)|unique }}"

# Specifies the available KEX (Key Exchange) algorithms. Multiple algorithms must be comma-separated.
# Dict with list of key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, ordered from strongest to
# oldest. Newer version supersedes older version.
ssh_server__kex_algorithms_map:

  '7.4':
    - 'curve25519-sha256'
    - 'curve25519-sha256@libssh.org'
    - 'diffie-hellman-group-exchange-sha256'

  # Source : https://stribika.github.io/2015/01/04/secure-secure-shell.html
  '6.6':
    - 'curve25519-sha256@libssh.org'
    - 'diffie-hellman-group-exchange-sha256'

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5':
    - 'curve25519-sha256@libssh.org'
    - 'ecdh-sha2-nistp521'
    - 'ecdh-sha2-nistp384'
    - 'ecdh-sha2-nistp256'
    - 'diffie-hellman-group-exchange-sha256'

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0':
    - 'diffie-hellman-group-exchange-sha256'

# List of additional key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, depending on available
# version, ordered from stronger to weaker. Newer version supersedes older
# version.
ssh_server__kex_algorithms_additional: []


# Build the default list of ciphers algorithms
ssh_server__ciphers: "\
  {% set ciphs = [] -%}
  {% for version, ciphers in ssh_server__ciphers_map|dictsort(reverse=true) -%}
  {%   if not ciphs and _ssh_server__version is version_compare(version, '>=') -%}
  {%     set _ = ciphs.extend(ciphers) -%}
  {%   endif -%}
  {% endfor -%}
  {{ ciphs|union(ssh_server__ciphers_additional)|unique }}"

# Specifies the ciphers allowed for protocol version 2. Multiple ciphers must be comma-separated.
# Dict with list of ciphers which should be used by the ``sshd`` server,
# depending on available version, ordered from strongest to weakest. Newer version
# supersedes older version.
ssh_server__ciphers_map:

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5':
    - 'chacha20-poly1305@openssh.com'
    - 'aes256-gcm@openssh.com'
    - 'aes128-gcm@openssh.com'
    - 'aes256-ctr'
    - 'aes192-ctr'
    - 'aes128-ctr'

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0':
    - 'aes256-ctr'
    - 'aes192-ctr'
    - 'aes128-ctr'

# List of additional key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, depending on available
# version, ordered from stronger to weaker. Newer version supersedes older
# version.
ssh_server__ciphers_additional: []


# Build the default list of Macs algorithms
ssh_server__macs: "\
  {% set macs = [] -%}
  {% for version, _macs in ssh_server__macs_map|dictsort(reverse=true) -%}
  {%   if not macs and _ssh_server__version is version_compare(version, '>=') -%}
  {%     set _ = macs.extend(_macs) -%}
  {%   endif -%}
  {% endfor -%}
  {{ macs|union(ssh_server__macs_additional)|unique }}"

# Specifies the available MAC (message authentication code) algorithms.
# The MAC algorithm is used in protocol version 2 for data integrity protection.
# Dict with list of message authentication code algorithms which should be used
# by the ``sshd`` server, depending on available version, ordered from stronger
# to weaker. Newer version supersedes older version.
ssh_server__macs_map:

  '7.6':
    - 'hmac-sha2-512-etm@openssh.com'
    - 'hmac-sha2-256-etm@openssh.com'
    - 'umac-128-etm@openssh.com'
    - 'hmac-sha2-512'
    - 'hmac-sha2-256'
    - 'umac-128@openssh.com'

  # Source : https://stribika.github.io/2015/01/04/secure-secure-shell.html
  '6.6':
    - 'hmac-sha2-512-etm@openssh.com'
    - 'hmac-sha2-256-etm@openssh.com'
    - 'hmac-ripemd160-etm@openssh.com'
    - 'umac-128-etm@openssh.com'
    - 'hmac-sha2-512'
    - 'hmac-sha2-256'
    - 'hmac-ripemd160'
    - 'umac-128@openssh.com'

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5':
    - 'hmac-sha2-512-etm@openssh.com'
    - 'hmac-sha2-256-etm@openssh.com'
    - 'umac-128-etm@openssh.com'
    - 'hmac-sha2-512'
    - 'hmac-sha2-256'
    - 'umac-128@openssh.com'

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0':
    - 'hmac-sha2-512'
    - 'hmac-sha2-256'
    - 'hmac-ripemd160'

# List of additional message authentication code algorithms to support
# by the ``sshd`` server, depending on available version, ordered from stronger
# to weaker. Newer version supersedes older version.
ssh_server__macs_additional: []

# Defines the number of bits in the ephemeral server key.
ssh_server__server_key_bits: 2048

# Number of seconds before ephemeral server key regenerating.
# If the value is 0, the key is never regenerated.
ssh_server__key_regeneration_interval: 3600

# Specifies a file containing a public host certificate.
# The certificate's public key must match a private host key already specified by HostKey.
# ssh_server__host_certificate:

# List of SSH host keys that should be enabled, in order of preference.
# Specifies a file containing a private host key used by SSH. It is possible to have multiple host key files.
# Note that sshd will refuse to use a file if it is group/world-accessible.
# (Default: (str):
#   - for protocol version 1
#     - /etc/ssh/ssh_host_key
# 	- for protocol version 2
#     - /etc/ssh/ssh_host_dsa_key     NOT THRUSTED
#     - /etc/ssh/ssh_host_ecdsa_key   NOT THRUSTED
#     - /etc/ssh/ssh_host_rsa_key
#     - /etc/ssh/ssh_host_ed25519_key
ssh_server__host_keys_types_map:
  '6.5':
    - 'ed25519'
    - 'ecdsa'
    - 'rsa'
  '6.0':
    - 'ecdsa'
    - 'rsa'

# Mapping of hostkey size
ssh_server__host_keys_types_bits_map:
  rsa: 2048
  dsa: 1024
  ecdsa: 384  # 256, 521

# If you want, you can manually set the host key that will be used
# If you dont declare the following variable, It will be generate by using the map above
# ssh_server__host_keys_types: []

# (Do not touch) Prefix to apply on hostkey basename
ssh_server__host_keys_file_prefix: ssh_host_
# (Do not touch) Suffix to apply on hostkey basename
ssh_server__host_keys_file_suffix: _key


### AUTHENTIFICATION MODE
# ---------------------------------------
# Specifies the authentication methods that must be successfully
ssh_server__authentication_methods: publickey password

# If set to “yes” this will enable PAM authentication using ChallengeResponseAuthentication and PasswordAuthentication
# If you just want the PAM account and session checks to run without PAM authentication,
# then enable this but set PasswordAuthentication and ChallengeResponseAuthentication to 'no'.
ssh_server__use_pam: false

# If login is used for interactive login sessions.
# Note that login(1) is never used for remote command execution.
ssh_server__use_login: false


## Password authentication
# ---------------------------------------
# Enable or disable password authentication.
ssh_server__password_authentication: true

# When password authentication is allowed, it specifies whether the server allows login to accounts with empty password strings.
ssh_server__permit_empty_passwords: false


## ChallengeResponse Authentication
# ---------------------------------------
# If challenge-response authentication is allowed
ssh_server__challenge_response_authentication: true


## Keyboard Interactive authentifiaction
# ---------------------------------------
ssh_server__keyboard_interactive_authentication: true


## PubKey authentication
# ---------------------------------------
# Enable or disable Public Key authentication.
ssh_server__pubkey_authentication: true

# Specifies the file that contains the public keys that can be used for user authentication.
# The following tokens are defined:
#   - %% is replaced by a literal '%'
#   - %h is replaced by the home directory of the user being authenticated
#   - %u is replaced by the username of that user.
# Multiple files may be listed, separated by whitespace.
ssh_server__authorized_keys: '{{
    ssh_server__authorized_keys_system
    |union(ssh_server__authorized_keys_user)
  }}'

# List of system-wide files containing SSH public keys. These files are
# expected to be maintained by system administrator and might be used in
# restricted environments (for example SFTPonly accounts).
ssh_server__authorized_keys_system:
  - '/etc/ssh/authorized_keys/%u'

# List of user files containing SSH public keys. These files are maintained by
# the users themselves.
ssh_server__authorized_keys_user:
  - '%h/.ssh/authorized_keys'

# Specifies a program to be used to look up the user's public keys.
# The program must be owned by root and not writable
# by group or others.  It will be invoked with a single argument of the username being authenticated,
# and should produce on standard output zero or more lines of authorized_keys output
# ssh_server__authorized_keys_command:

# Specifies the user under whose account the AuthorizedKeysCommand is run.
ssh_server__authorized_keys_command_user: nobody

# Specifies a file that lists principal names that are accepted for certificate authentication.
# When using certificates signed by a key listed in TrustedUserCAKeys, this file lists names,
# one of which must appear in the certificate for it to be accepted for authentication.
# Names are listed one per line preceded by key options (as described in AUTHORIZED_KEYS FILE FORMAT in sshd(8)).
# Empty lines and comments starting with ‘#’ are ignored.
# The following tokens are defined:
#   - %% is replaced by a literal '%'
#   - %h is replaced by the home directory of the user being authenticated
#   - %u is replaced by the username of that user.
# After expansion, AuthorizedPrincipalsFile is taken to be an absolute path or one relative to the user's home directory.
# In case of no file specified, the username of the user must appear in a certificate's principals list for it to be accepted.
# Note that AuthorizedPrincipalsFile is only used when authentication proceeds using a CA listed in TrustedUserCAKeys and is not
# consulted for certification authorities trusted via ~/.ssh/authorized_keys, though the principals= key option offers a similar facility.
# ssh_server__authorized_principals_file:

# Specifies a file containing public keys of certificate authorities that are trusted to sign user certificates for authentication.
# Keys are listed one per line; empty lines and comments starting with ‘#’ are allowed.
# If a certificate is presented for authentication and has its signing CA key listed in this file, then it may be used for authen‐
# tication for any user listed in the certificate's principals list.
# Note that certificates that lack a list of principals will not be permitted for authentication using TrustedUserCAKeys.
# ssh_server__trusted_user_ca_keys:

# Specifies a list of revoked public keys.  Keys listed in this file will be refused for public key authentication.
# Note that if this file is not readable, then public key authentication will be refused for all users.
# ssh_server__revoked_keys:

# If sshd should allow keys recorded in its blacklist of known-compromised keys.
# If “yes", authentication with compromised keys will be logged but accepted.
# If “no",  authentication with compromised keys will be rejected.
ssh_server__permit_blacklisted_keys: false

## RSA authentication
# ---------------------------------------
# Protocol 1
# If pure RSA authentication is allowed.
ssh_server__rsa_authentication: false

# If rhosts or /etc/hosts.equiv authentication together with successful RSA host authentication is allowed.
ssh_server__rhosts_rsa_authentication: false

## Hostbased authentication
# ---------------------------------------
# Protocol 2
# If rhosts or /etc/hosts.equiv authentication together with successful public key client host authentication is allowed.
ssh_server__host_based_authentication: false

# If the server will make a reverse name lookup when matching the name in the ~/.shosts, ~/.rhosts, and /etc/hosts.equiv
# files during HostbasedAuthentication. If “yes” sshd uses the name supplied by the client rather than attempting to resolve
# the name from the TCP connection itself.
ssh_server__host_based_uses_name_from_packet_only: false

# Specifies whether sshd should ignore the user's ~/.ssh/known_hosts during RhostsRSAAuthentication or HostbasedAuthentication.
ssh_server__ignore_user_known_hosts: false

# Specifies that .rhosts and .shosts files will not be used in RhostsRSAAuthentication or HostbasedAuthentication.
# /etc/hosts.equiv and /etc/ssh/shosts.equiv are still used.
ssh_server__ignore_rhosts: true


## Kerberos authentication
# ---------------------------------------
# If password provided by the user for PasswordAuthentication will be validated through the Kerberos KDC.
ssh_server__kerberos_authentication: false

# If AFS is active and the user has a Kerberos 5 TGT, attempt to acquire an AFS token before accessing the user's home directory.
ssh_server__kerberos_get_afs_token: false

# If password authentication through Kerberos fails then the password will be validated via any additional local mechanism such as /etc/passwd.
ssh_server__kerberos_or_local_passwd: true

# If to automatically destroy the user's ticket cache file on logout.
ssh_server__kerberos_ticket_cleanup: true

# Specifies whether to look at .k5login file for user's aliases.
ssh_server__kerberos_use_kuserok: true


## GSSAPI authentication
# ---------------------------------------
# If user authentication based on GSSAPI is allowed. (Protocol 2)
ssh_server__gssapi_authentication: false

# If key exchange based on GSSAPI is allowed. GSSAPI key exchange doesn't rely on ssh keys to verify host identity. (Protocol 2)
ssh_server__gssapi_key_exchange: false

# If to automatically destroy the user's credentials cache on logout. (Protocol 2)
ssh_server__gssapi_cleanup_credentials: true

# Determines whether to be strict about the identity of the GSSAPI acceptor a client authenticates against.
# If "yes" then the client must authenticate against the host service on the current hostname.
# If "no" then the client may authenticate against any service key stored in the machine's default store.
ssh_server__gssapi_strict_acceptor_check: true

# Controls if the user's GSSAPI credentials should be updated following a successful connection rekeying.
ssh_server__gssapi_store_credentials_on_rekey: false

# Specifies whether to look at .k5users file for GSSAPI authentication access control. Further details are described in ksu(1).
ssh_server__gssapi_enable_k5_users: false


### AUTHORIZATION
# ------------------------------
# The allow/deny directives are processed in the following order: DenyUsers, AllowUsers, DenyGroups, and finally AllowGroups.

## User-based access control
# ------------------------------
# Only user names are valid; a numerical user ID is not recognized.
# This keyword can be followed by a list of user name patterns, separated by spaces.
# If the pattern takes the form USER@HOST then USER and HOST are separately checked, restricting logins to particular users from particular hosts.
# Login is disallowed for user names that match one of the patterns.  Only user names are valid; a numerical user ID is not recognized.
ssh_server__deny_users: []
# If specified, login is allowed only for user names that match one of the patterns.
ssh_server__allow_users: []

## Group-based access control
# ------------------------------
# Only group names are valid; a numerical group ID is not recognized.
# This keyword can be followed by a list of group name patterns, separated by spaces.
# Login is disallowed for users whose primary group or supplementary group list matches one of the patterns.
ssh_server__deny_groups: []
# If specified, login is allowed only for users whose primary group or supplementary group list matches one of the patterns.
ssh_server__allow_groups: []

## Root user access control
# ------------------------------
# Specifies whether root can log in using ssh.
# Values: "yes", "without-password", "forced-commands-only", or "no".
#   - "without-password", password authentication is disabled for root.
#   - "forced-commands-only", root login with public key authentication will be allowed, but only if the command option has been specified.
#   - "no", root is not allowed to log in.
ssh_server__permit_root_login: "{{
    'prohibit-password'
    if _ssh_server__version is version_compare(7.0, '>=')
    else true
  }}"


### LOGIN
# ------------------------------
# Time after which unauthenticated sessions are disconnected.
ssh_server__login_grace_time: '120s'

# Maximum number of failed authentication attempts allowed by the server.
ssh_server__max_auth_tries: 4

# Specifies the maximum number of open sessions permitted per network connection.
ssh_server__max_sessions: 10

# sshd will refuse connection attempts with a probability of “rate/100” (Default : 30%) if there are currently “start” (Default : 10) unauthenticated connections.
# The probability increases linearly and all connection attempts are refused if the number of unauthenticated connections reaches “full”.
# Values “start:rate:full” or a dict with keys start:10, rate:full
ssh_server__max_startups:
  start: 10
  rate: 30
  full: 100

## User environment
# ------------------------------
# What environment variables sent by the client will be copied into the session's environ.
# Variables are specified by name, which may contain the wildcard characters ‘*’ and ‘?’.
# Multiple environment variables may be separated by whitespace or spread across multiple AcceptEnv directives.
ssh_server__accept_env:
  - 'LANG'
  - 'LC_*'

# If ~/.ssh/environment and environment= options in ~/.ssh/authorized_keys are processed by sshd.
# Enabling environment processing may enable users to bypass access restrictions in some configurations using mechanisms such as LD_PRELOAD.
ssh_server__permit_user_environment: false

# Specifies whether any ~/.ssh/rc file is executed
ssh_server__permit_user_rc: true

# Specifies whether pty(4) allocation is permitted.
ssh_server__permit_tty: true

# If sshd should check file modes and ownership of the user's files and home directory before accepting login.
# Note: for ChrootDirectory permissions and owner ship are checked unconditionally.
ssh_server__strict_modes: true

## Greeting options
# ------------------------------
# Additional text to append to the SSH protocol banner sent by the server upon connection.
# ssh_server__version_addendum:

# The contents of the specified file are sent to the remote user before authentication is allowed.
ssh_server__banner: 'none'

# Specifies whether the distribution-specified extra version suffix is included during initial protocol handshake.
ssh_server__debian_banner: false

# If sshd should print /etc/motd when a user logs in interactively.
ssh_server__print_motd: true

# If sshd should print the date and time of the last user login when a user logs in interactively.
ssh_server__print_last_log: true

## Session options
# ------------------------------
# The pathname of a directory to chroot to after authentication.
# All components of the pathname must be root-owned directories that are not writable by any other user or group.
# After the chroot, sshd changes the working directory to the user's home directory.
# Available tokens :
#   - %% is replaced by a literal '%'
#   - %h is replaced by the home directory of the user being authenticated
#   - %u is replaced by the username of that user.
# The ChrootDirectory must contain the necessary files and directories to support the user's session.
ssh_server__chroot_directory: none

# Forces the execution of the command specified by ForceCommand, ignoring any command supplied by the client and ~/.ssh/rc if present.
# This applies to shell, command, or subsystem execution.
# Specifying a command of “internal-sftp" will force the use of an in-process sftp server that requires no support files when used with ChrootDirectory.
# ssh_server__force_command:

# Number of seconds after which if no data has been received from the client, sshd(8) will send a message to request a response from the client.
ssh_server__client_alive_interval: 0

# The number of client alive messages which may be sent without sshd(8) receiving any messages back from the client.
# If it is reached sshd will disconnect the client, terminating the session.
ssh_server__client_alive_count_max: 3

## X11 FORWARDING
# ------------------------------
# Enable or disable X11 forwarding by the server.
ssh_server__x11_forwarding: false

# The first display number available for X11 forwarding.
ssh_server__x11_display_offset: 10

# If sshd should bind the X11 forwarding server to the loopback address or to the wildcard address.
# By default, sshd binds the forwarding server to the loopback address and sets the hostname part of the DISPLAY environment variable to “localhost”.
# This prevents remote hosts from connecting to the proxy display. However, some older X11 clients may not function with this configuration.
# X11UseLocalhost may be set to “no” to specify that the forwarding server should be bound to the wildcard address.
ssh_server__x11_use_localhost: true

# Specifies the full pathname of the xauth(1) program.
# ssh_server__xauth_location:


### Subsystems
# ----------------------------
# Configures an external subsystem (e.g. file transfer daemon).
# Arguments should be a subsystem name and a command (with optional arguments) to execute upon subsystem request.
# The command sftp-server(8) implements the “sftp” file transfer subsystem.
# Alternately the name “internal-sftp” implements an in-process “sftp” server.
# This may simplify configurations using ChrootDirectory to force a different filesystem root on clients.

# This variable is intended to be used in Ansible’s global inventory.
ssh_server__subsystems_default:
  sftp: internal-sftp

# This variable is intended to be used in Ansible’s global inventory.
ssh_server__subsystems_global: {}

# This variable is intended to be used in Ansible’s group var file.
ssh_server__subsystems_group: {}

# This variable is intended to be used in Ansible’s host var file.
ssh_server__subsystems_host: {}

# # Combine all subsystems lists
ssh_server__subsystems: '{{
    ssh_server__subsystems_host
    |combine(ssh_server__subsystems_group)
    |combine(ssh_server__subsystems_global)
    |combine(ssh_server__subsystems_default)
  }}'


### Match conditional blocks
# ----------------------------
# List of conditional Match blocks to include
# If all of the criteria on the Match line are satisfied, the keywords on the following lines override those set in the global section of the
# config file, until either another Match line or the end of the file.
# If a keyword appears in multiple Match blocks that are satisified, only the first instance of the keyword is applied.
# Each match rule must have the required parameters:
#
#  match : the arguments to Match are one or more criteria-pattern pairs or the single token All which matches all criteria.
#     The available criteria are :
#        - User
#        - Group
#        - Host
#        - LocalAddress
#        - LocalPort
#        - Address
#     The match patterns may consist of single entries or comma-separated lists and may use the wildcard and negation operators described in the PATTERNS section.
#     The patterns in an Address criteria may additionally contain addresses to match in CIDR address/masklen format, e.g. “192.0.2.0/24” or “3ffe:ffff::/32”.
#     Note that the mask length provided must be consistent with the address -
#        it is an error to specify a mask length that is too long for the address or one with bits set in this host portion of the address.
#     For example, “192.0.2.0/33” and “192.0.2.0/8” respectively.
#  options : List of settings to apply

# Only a subset of keywords may be used on the lines following a Match keyword.
# Available keywords are AcceptEnv, AllowAgentForwarding, AllowGroups, AllowTcpForwarding, AllowUsers,
#   AuthenticationMethods, AuthorizedKeysCommand, AuthorizedKeysCommandUser, AuthorizedKeysFile, AuthorizedPrincipalsFile,
#   Banner, ChrootDirectory, DenyGroups, DenyUsers, ForceCommand, GatewayPorts, GSSAPIAuthentication, HostbasedAuthentication,
#   HostbasedUsesNameFromPacketOnly, KbdInteractiveAuthentication, KerberosAuthentication, MaxAuthTries, MaxSessions,
#   PasswordAuthentication, PermitEmptyPasswords, PermitOpen, PermitRootLogin, PermitTTY, PermitTunnel, PermitUserRC,
#   PubkeyAuthentication, RekeyLimit, RhostsRSAAuthentication, RSAAuthentication, X11DisplayOffset, X11Forwarding and X11UseLocalHost.


# This variable is intended to be used in Ansible’s global inventory.
ssh_server__match_list_global: []

# This variable is intended to be used in Ansible’s group var file.
ssh_server__match_list_group: []

# This variable is intended to be used in Ansible’s host var file.
ssh_server__match_list_host: []

# # Combine all match lists
ssh_server__match_list: '{{
    ssh_server__match_list_host
    |union(ssh_server__match_list_group)
    |union(ssh_server__match_list_global)
  }}'

# Default ``Match`` conditional block which defines configuration for SFTPonly accounts.
ssh_server__match_group_sftponly:
  match: Group sftponly
  options: |
    AuthorizedKeysFile {{ ssh_server__authorized_keys_system|join(' ') }}
    ChrootDirectory %h
    X11Forwarding no
    AllowAgentForwarding no
    AllowTcpForwarding no
    PermitTunnel no
    ForceCommand internal-sftp
