---
# defaults file for ssh-server

# Simple placeholder to allow other roles to detect this role
ssh_server__role: True
# Enable facts deploiement
ssh_server__facts: True

ssh_server_config_dir: /etc/ssh

# the name of the ssh service
ssh_server__service_name: sshd

# Specify minimum size of Diffie-Hellman parameters available to the SSH
# server. Parameters smaller than the given amount will be removed from the
# :file:`/etc/ssh/moduli` file.
ssh_server__moduli_minimum: '4096'


# ---------------------------------------
# SSHD settings
# ---------------------------------------

### NETWORK SECTION
# ---------------------------------------
# List of ports which ``sshd`` will listen on.
ssh_server__ports:
  - '22'

# List of IP addresses on which ``sshd`` should listen for new connections. If
# it's empty, ``sshd`` listens on all interfaces.
# Specifies the local addresses sshd(8) should listen on.  The following forms may be used:
#   ListenAddress host|IPv4_addr|IPv6_addr
#   ListenAddress host|IPv4_addr:port
#   ListenAddress [host|IPv6_addr]:port
# If port is not specified, sshd will listen on the address and all prior Port options specified.
# The default is to listen on all local addresses. Multiple ListenAddress options are permitted.
ssh_server__listen: ['0.0.0.0']

# Specifies which address family should be used by sshd(8).
# Values: "any", "inet" (use IPv4 only), or "inet6" (use IPv6 only).
ssh_server__address_family: 'any'

# If sshd should look up the remote host name and check that the resolved host name for the remote IP address maps back to the very same IP address.
ssh_server__use_dns: True

# Specifies whether ssh-agent forwarding is permitted.
# Values 'yes'/'all' to allow, 'no' to prevent, 'local' to allow only local, 'remote' to allow only remote
ssh_server__allow_agent_forwarding: True

# Specifies whether TCP forwarding is permitted.
# Values 'yes'/'all' to allow, 'no' to prevent, 'local' to allow only local, 'remote' to allow only remote
# (Default: (bool) yes)
ssh_server__allow_tcp_forwarding: True

# Specifies the destinations to which TCP port forwarding is permitted.
# The forwarding specification must be one of the following forms:
#   PermitOpen host:port
#   PermitOpen IPv4_addr:port
#   PermitOpen [IPv6_addr]:port
# Multiple forwards may be specified by separating them with whitespace.
# An argument of “any" can be used to remove all restrictions and permit any forwarding requests.
ssh_server__permit_open: 'any'

# If remote hosts are allowed to connect to ports forwarded for the client.
# By default, sshd(8) binds remote port forwardings to the loopback address.
# This prevents other remote hosts from connecting to forwarded ports.
# GatewayPorts can be used to specify that sshd should allow remote port forwardings to bind to non-loopback addresses, thus allowing other hosts to connect.
#   - "no" to force remote port forwardings to be available to the local host only
#   - "yes" to force remote port forwardings to bind to the wildcard address
#   - "clientspecified" to allow the client to select the address to which the forwarding is bound
ssh_server__gateway_ports: False

# Specifies whether StreamLocal (Unix-domain socket) forwarding is permitted
# Values 'yes'/'all' to allow, 'no' to prevent, 'local' to allow only local, 'remote' to allow only remote
ssh_server__allow_stream_local_forwarding: True

# If tun device forwarding is allowed.
# Values: "yes", "point-to-point" (layer 3), "ethernet" (layer 2), or "no".
# Specifying “yes" permits both "point-to-point" and "ethernet".
ssh_server__permit_tunnel: False

# If compression is allowed, or delayed until the user has authenticated successfully.
# Values: "yes", "delayed", or "no".
ssh_server__compression: delayed

# Specifies the IPv4 type-of-service or DSCP class for the connection.
# This option may take one or two arguments, separated by whitespace.
# If one argument is specified, it is used as the packet class unconditionally.
# If two values are specified, the first is automatically selected for interactive sessions and the second for non-interactive sessions.
# The default is “lowdelay” for interactive sessions and “throughput” for non-interactive sessions.
# Values: "af11", "af12", "af13", "af21", "af22", "af23", "af31", "af32", "af33", "af41", "af42", "af43", "cs0", "cs1",
#  "cs2", "cs3", "cs4", "cs5", "cs6", "cs7", "ef", "lowdelay", "throughput", "reliability", or a numeric value.
ssh_server__ip_qos: ["lowdelay", "throughput"]



### AUTHENTIFICATION MODE
# ---------------------------------------
# Specifies the authentication methods that must be successfully
ssh_server__authentication_methods: publickey password

# If set to “yes” this will enable PAM authentication using ChallengeResponseAuthentication and PasswordAuthentication
# If you just want the PAM account and session checks to run without PAM authentication,
# then enable this but set PasswordAuthentication and ChallengeResponseAuthentication to 'no'.
ssh_server__use_pam: False

# If login is used for interactive login sessions.
# Note that login(1) is never used for remote command execution.
ssh_server__use_login: False


## Password authentication
# ---------------------------------------
# Enable or disable password authentication.
ssh_server__password_authentication: True

# When password authentication is allowed, it specifies whether the server allows login to accounts with empty password strings.
ssh_server__permit_empty_passwords: False


## ChallengeResponse Authentication
# ---------------------------------------
# If challenge-response authentication is allowed
ssh_server__challenge_response_authentication: True


## Keyboard Interactive authentifiaction
# ---------------------------------------
ssh_server__keyboard_interactive_authentication: True


## PubKey authentication
# ---------------------------------------
# Enable or disable Public Key authentication.
ssh_server__pubkey_authentication: True

# Specifies the file that contains the public keys that can be used for user authentication.
# The following tokens are defined:
#   - %% is replaced by a literal '%'
#   - %h is replaced by the home directory of the user being authenticated
#   - %u is replaced by the username of that user.
# Multiple files may be listed, separated by whitespace.
ssh_server__authorized_keys: '{{ sshd__authorized_keys_system|union(sshd__authorized_keys_user) }}'

# List of system-wide files containing SSH public keys. These files are
# expected to be maintained by system administrator and might be used in
# restricted environments (for example SFTPonly accounts).
ssh_server__authorized_keys_system:
  - '/etc/ssh/authorized_keys/%u'

# List of user files containing SSH public keys. These files are maintained by
# the users themselves.
ssh_server__authorized_keys_user:
  - '%h/.ssh/authorized_keys'

# Specifies a program to be used to look up the user's public keys.
# The program must be owned by root and not writable
# by group or others.  It will be invoked with a single argument of the username being authenticated,
# and should produce on standard output zero or more lines of authorized_keys output
#ssh_server__authorized_keys_command:

# Specifies the user under whose account the AuthorizedKeysCommand is run.
ssh_server__authorized_keys_command_user: 'nobody'


## Kerberos authentication
# ---------------------------------------
# If password provided by the user for PasswordAuthentication will be validated through the Kerberos KDC.
ssh_server__kerberos_authentication: False

# If AFS is active and the user has a Kerberos 5 TGT, attempt to acquire an AFS token before accessing the user's home directory.
ssh_server__kerberos_get_afs_token: False

# If password authentication through Kerberos fails then the password will be validated via any additional local mechanism such as /etc/passwd.
ssh_server__kerberos_or_local_passwd: True

# If to automatically destroy the user's ticket cache file on logout.
ssh_server__kerberos_ticket_cleanup: True

# Specifies whether to look at .k5login file for user's aliases.
ssh_server__kerberos_use_kuserok: True


## GSSAPI authentication
# ---------------------------------------
# If user authentication based on GSSAPI is allowed. (Protocol 2)
ssh_server__gssapi_authentication: False

# If key exchange based on GSSAPI is allowed. GSSAPI key exchange doesn't rely on ssh keys to verify host identity. (Protocol 2)
ssh_server__gssapi_key_exchange: False

# If to automatically destroy the user's credentials cache on logout. (Protocol 2)
ssh_server__gssapi_cleanup_credentials: True

# Determines whether to be strict about the identity of the GSSAPI acceptor a client authenticates against.
# If "yes" then the client must authenticate against the host service on the current hostname.
# If "no" then the client may authenticate against any service key stored in the machine's default store.
ssh_server__gssapi_strict_acceptor_check: True

# Controls if the user's GSSAPI credentials should be updated following a successful connection rekeying.
ssh_server__gssapi_store_credentials_on_rekey: False

#Specifies whether to look at .k5users file for GSSAPI authentication access control. Further details are described in ksu(1).
ssh_server__gssapi_enable_k5_users: False






# List of SSH host keys that should be enabled, in order of preference.
ssh_server__host_keys: [ 'ed25519', 'rsa', 'ecdsa' ]

# How much information should be logged by ``sshd`` server.
ssh_server__log_level: 'INFO'

# With which faciity the SSHD will log
ssh_server__log_facility: 'AUTH'

# Specify if access to ``root`` account should be granted. By default ``root``
# can be accessed only using SSH public keys.
ssh_server__permit_root_login: 'no'








# Enable or disable X11 forwarding by the server.
ssh_server__x11_forwarding: 'no'

# Maximum number of failed authentication attempts allowed by the server.
ssh_server__max_auth_tries: '4'

# Maximum number of unauthenticated connections (3), after which there's 80%
# probability of next unauthenticated connection to be dropped, finishing at 7,
# after which all new unauthenticated connections will be refused.
ssh_server__max_startups: '3:80:7'

# Time after which unauthenticated sessions are disconnected.
ssh_server__login_grace_time: '20s'

# Path to file which should be displayed before user authentication.
ssh_server__banner: 'none'

# If sshd should print /etc/motd when a user logs in interactively.
ssh_server__print_motd: 'no'

# If sshd should print the date and time of the last user login when a user logs in interactively.
ssh_server__print_last_log: 'yes'

# List of environments variable that the server will accept to load
ssh_server__accept_env: [ 'LANG', 'LC_*' ]

# Specify if ``sshd`` should use unprivileged processes for incoming session
# authentication. Setting this to ``sandbox`` enables use of additional
# kernel restrictions.
ssh_server__privilege_separation: 'sandbox'




# Encryption parameters
# -------------------------

# Dict with list of ciphers which should be used by the ``sshd`` server,
# depending on available version, ordered from strongest to weakest. Newer version
# supersedes older version.
ssh_server__ciphers_map:

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'chacha20-poly1305@openssh.com', 'aes256-gcm@openssh.com',
           'aes128-gcm@openssh.com', 'aes256-ctr', 'aes192-ctr',
           'aes128-ctr' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'aes256-ctr', 'aes192-ctr', 'aes128-ctr' ]


# List of additional key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, depending on available
# version, ordered from stronger to weaker. Newer version supersedes older
# version.
ssh_server__ciphers_additional: []



# Dict with list of key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, ordered from strongest to
# oldest. Newer version supersedes older version.
ssh_server__kex_algorithms_map:

  # Source : https://stribika.github.io/2015/01/04/secure-secure-shell.html
  '6.6': ['curve25519-sha256@libssh.org', 'diffie-hellman-group-exchange-sha256']

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'curve25519-sha256@libssh.org', 'ecdh-sha2-nistp521',
           'ecdh-sha2-nistp384', 'ecdh-sha2-nistp256',
           'diffie-hellman-group-exchange-sha256' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'diffie-hellman-group-exchange-sha256' ]



# List of additional key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, depending on available
# version, ordered from stronger to weaker. Newer version supersedes older
# version.
ssh_server__kex_algorithms_additional: []



#
# Dict with list of message authentication code algorithms which should be used
# by the ``sshd`` server, depending on available version, ordered from stronger
# to weaker. Newer version supersedes older version.
ssh_server__macs_map:

  # Source : https://stribika.github.io/2015/01/04/secure-secure-shell.html
  '6.6': ['hmac-sha2-512-etm@openssh.com', 'hmac-sha2-256-etm@openssh.com',
          'hmac-ripemd160-etm@openssh.com', 'umac-128-etm@openssh.com',
          'hmac-sha2-512', 'hmac-sha2-256',
          'hmac-ripemd160', 'umac-128@openssh.com']

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'hmac-sha2-512-etm@openssh.com', 'hmac-sha2-256-etm@openssh.com',
           'umac-128-etm@openssh.com', 'hmac-sha2-512', 'hmac-sha2-256',
           'umac-128@openssh.com' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'hmac-sha2-512', 'hmac-sha2-256' , 'hmac-ripemd160' ]



#
# List of additional message authentication code algorithms to support
# by the ``sshd`` server, depending on available version, ordered from stronger
# to weaker. Newer version supersedes older version.
ssh_server__macs_additional: []


#
# If set to True, only the first item (which is considered the strongest method
# available) from the lists :envvar:`sshd__ciphers_map`,
# :envvar:`sshd__kex_algorithms_map` and :envvar:`sshd__macs_map` will be configured for
# ``sshd``. Use this with care as it will deny access to anyone not able to use
# the first cryptographic method.
# See https://github.com/debops/ansible-sshd/issues/20
ssh_server__paranoid: False




# Group-based access control
# ------------------------------


# List of UNIX groups which allow connections to SSH service (global).
ssh_server__allow_groups: []
ssh_server__deny_groups: []





# Match conditional blocks
# ----------------------------

# List of conditional ``Match`` blocks to include in ``sshd_config``.
# Required parameters:
#
# - ``match``: specify User, Group, or other Match arguments which should
#   activate a given configuration block.
#
# - ``options``: YAML text block which contains :manpage:`sshd_config(5)` options
#   active in a given Match block.
#
# This variable is intended to be used in Ansible’s global inventory.
ssh_server__match_list_global: []

# This variable is intended to be used in Ansible’s group var file.
ssh_server__match_list_group: []

# This variable is intended to be used in Ansible’s host var file.
ssh_server__match_list_host: []

# # Combine all match lists
ssh_server__match_list: '{{ ssh_server__match_list_host|union(ssh_server__match_list_group)|union(ssh_server__match_list_global) }}'


# Default ``Match`` conditional block which defines configuration for SFTPonly
# accounts.
ssh_server__match_group_sftponly:
  match: 'Group sftponly'
  options: |
    AuthorizedKeysFile {{ sshd__authorized_keys_system | join(' ') }}
    ChrootDirectory %h
    X11Forwarding no
    AllowAgentForwarding no
    AllowTcpForwarding no
    PermitTunnel no
    ForceCommand internal-sftp
